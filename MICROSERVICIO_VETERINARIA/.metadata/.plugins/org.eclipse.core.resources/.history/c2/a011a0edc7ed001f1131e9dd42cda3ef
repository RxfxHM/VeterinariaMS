package com.mx.Veterinarias.Controller;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.mx.Veterinarias.Entity.Veterinarias;
import com.mx.Veterinarias.Models.Clientes;
import com.mx.Veterinarias.Models.Mascotas;
import com.mx.Veterinarias.Models.Responsables;
import com.mx.Veterinarias.Service.VeterinariasServiceImp;

@RestController
@RequestMapping("/veterinarias")
@CrossOrigin
public class VeterinariasWS {
	
	@Autowired
	private VeterinariasServiceImp service;
	
	///guardar
	//http://localhost:8001/veterinarias/guardar
	@PostMapping("/guardar")
	public ResponseEntity<?> guardar(@RequestBody Veterinarias veterinaria){
		Veterinarias aux = service.guardarVeterinaria(veterinaria);
		if(aux == null) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
		}else {
			return ResponseEntity.status(HttpStatus.OK).body(aux);
		}
	}
	
	//listar
	//http://localhost:8001/veterinarias/listar
	@GetMapping("/listar")
	public ResponseEntity<?> listar(){
		List<Veterinarias> list = service.listarVeterinarias();
		if(list.isEmpty()) {
			return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
		}else {
			return ResponseEntity.status(HttpStatus.OK).body(list);
		}
	}
	
	//editar
	//http://localhost:8001/veterinarias/editar
	@PutMapping("/editar")
	public ResponseEntity<?> editar(@RequestBody Veterinarias veterinaria){
		Veterinarias aux = service.editarVterinarias(veterinaria);
		if(aux == null) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
		}else {
			return ResponseEntity.status(HttpStatus.OK).body(aux);
		}
	}
	
	//eliminar
	//http://localhost:8001/veterinarias/eliminar
	@DeleteMapping("/eliminar/{idVeterinaria}")
	public ResponseEntity<?> eliminar(@PathVariable Long idVeterinaria){
		Veterinarias aux = service.eliminarVeterinaria(idVeterinaria);
		if(aux == null) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
		}else {
			return ResponseEntity.status(HttpStatus.OK).body(aux);
		}
	}
	
	//buscar
	//http://localhost:8001/veterinarias/buscar
	@GetMapping("/buscar/{idVeterinaria}")
	public ResponseEntity<?> buscar(@PathVariable Long idVeterinaria){
		Veterinarias aux = service.buscarVeterinaria(idVeterinaria);
		if(aux == null) {
			return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
		}else {
			return ResponseEntity.status(HttpStatus.OK).body(aux);
					
		}
	}
	
	
	//-------------------------- Responsables
	@GetMapping("/Responsables/listar")
	public ResponseEntity<List<Responsables>> listarResponsables(){
		List<Responsables> list = service.getTodosResponsables();
		if(list.isEmpty()) {
			return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
		}else {
			return ResponseEntity.status(HttpStatus.OK).body(list);
		}
	}
	
	//http://localhost:7000/veterinarias/Responsables/guardar
	@PostMapping("/Responsables/guardar")
	public ResponseEntity<?> guardarResponsable(@RequestBody Responsables responsable){
		Responsables aux = service.saveResponsable(responsable);
		if(aux == null) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
		}else {
			return ResponseEntity.status(HttpStatus.OK).body(aux);
		}
	}
	
	@PutMapping("/Responsables/editar")
	public ResponseEntity<?> editarResponsable(@RequestBody Responsables responsables){
		Responsables edit = service.editResponsables(responsables);
		if(edit == null) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
		}else {
			return ResponseEntity.ok(edit);
		}
	}
	
	@DeleteMapping("/Responsables/eliminar/{idResponsable}")
	public ResponseEntity<?> eliminarResponsable(@PathVariable Long idResponsable){
		Responsables delete = service.deleteResponsables(idResponsable);
		if(delete == null) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
		}else {
			return ResponseEntity.ok(delete);
		}
	}
	
	@PostMapping("/Responsables/buscar/{idResponsable}")
	public ResponseEntity<?> buscarResponsable(@PathVariable Long idResponsable){
		Responsables buscar = service.findResponsables(idResponsable);
		if(buscar == null) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
		}else {
			return ResponseEntity.ok(buscar);
		}
	}
	
	@PostMapping("/Responsables/veterinaria/{veterinariaId}")
	public ResponseEntity<?> obtenerResponsablesPorVeterinariaId(@PathVariable Long veterinariaId){
		List<Responsables> responsables = service.getResponsables(veterinariaId);
		if(responsables.isEmpty()) {
			return ResponseEntity.badRequest().build();
		}else {
			return ResponseEntity.ok(responsables);
		}
	}
	
	//******************************************M A S C O T A S
	@GetMapping("/mascotas/listar")
	public ResponseEntity<List<Mascotas>> listarMascotas(){
		List<Mascotas> list = service.getTodosMascotas();
		if(list.isEmpty()) {
			return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
		}else {
			return ResponseEntity.status(HttpStatus.OK).body(list);
		}
	}
	
	//http://localhost:7000/veterinarias/mascotas/guardar
	@PostMapping("/mascotas/guardar")
	public ResponseEntity<?> guardarMascotas(@RequestBody Mascotas mascota){
		Mascotas aux = service.saveMascota(mascota);
		if(aux == null) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
		}else {
			return ResponseEntity.status(HttpStatus.OK).body(aux);
		}
	}
	
	@PutMapping("/mascotas/editar")
	public ResponseEntity<?> editarMascota(@RequestBody Mascotas mascota){
		Mascotas edit = service.editMascota(mascota);
		if(edit == null) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
		}else {
			return ResponseEntity.ok(edit);
		}
	}
	
	@DeleteMapping("/mascotas/eliminar/{idMascota}")
	public ResponseEntity<?> eliminarMascota(@PathVariable Long idMascota){
		Mascotas delete = service.deleteMascota(idMascota);
		if(delete == null) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
		}else {
			return ResponseEntity.ok(delete);
		}
	}
	
	@PostMapping("/mascotas/buscar/{idMascota}")
	public ResponseEntity<?> buscarMascota(@PathVariable Long idMascota){
		Mascotas buscar = service.findMascota(idMascota);
		if(buscar == null) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
		}else {
			return ResponseEntity.ok(buscar);
		}
	}
	
	@PostMapping("/mascotas/veterinaria/{veterinariaId}")
	public ResponseEntity<?> obtenerMascotasPorVeterinariaId(@PathVariable Long veterinariaId){
		List<Mascotas> responsables = service.getMascotas(veterinariaId);
		if(responsables.isEmpty()) {
			return ResponseEntity.badRequest().build();
		}else {
			return ResponseEntity.ok(responsables);
		}
	}
	
	//******************************************C L I E N T E S 
	@GetMapping("/clientes/listar")
	public ResponseEntity<List<Clientes>> listarClientes(){
		List<Clientes> list = service.getTodosClientes();
		if(list.isEmpty()) {
			return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
		}else {
			return ResponseEntity.status(HttpStatus.OK).body(list);
		}
	}
	
	//http://localhost:7000/veterinarias/mascotas/guardar
	@PostMapping("/clientes/guardar")
	public ResponseEntity<?> guardarCliente(@RequestBody Clientes cliente){
		Clientes aux = service.saveCliente(cliente);
		if(aux == null) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
		}else {
			return ResponseEntity.status(HttpStatus.OK).body(aux);
		}
	}
		
	@PutMapping("/clientes/editar")
	public ResponseEntity<?> editarCliente(@RequestBody Clientes cliente){
		Clientes edit = service.editarClientes(cliente);
		if(edit == null) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
		}else {
			return ResponseEntity.ok(edit);
		}
	}
	
	@DeleteMapping("/clientes/eliminar/{idCliente}")
	public ResponseEntity<?> eliminarCliente(@PathVariable Long idCliente){
		Clientes delete = service.deleteClientes(idCliente);
		if(delete == null) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
		}else {
			return ResponseEntity.ok(delete);
		}
	}
	
	@PostMapping("/clientes/buscar/{idCliente}")
	public ResponseEntity<?> buscarCliente(@PathVariable Long idCliente){
		Clientes buscar = service.findclientes(idCliente);
		if(buscar == null) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
		}else {
			return ResponseEntity.ok(buscar);
		}
	}
	
		/*@PostMapping("/cliente/veterinaria/{veterinariaId}")
		public ResponseEntity<?> obtenerClientesPorVeterinariaId(@PathVariable Long veterinariaId){
			List<Clientes> responsables = service.getClientes(veterinariaId);
			if(responsables.isEmpty()) {
				return ResponseEntity.badRequest().build();
			}else {
				return ResponseEntity.ok(responsables);
			}
		}*/
		
	//************************ O B T E N E R     T O D O S     L O S      M O D U L O S ***************
	@PostMapping("todo/{veterinariaId}")
	public ResponseEntity<?> listarTodo(@PathVariable Object veterinariaId){
		Map<String, Object> modulos = service.obtenerTodosLosModulos(veterinariaId);
		
		return ResponseEntity.ok(modulos);
	}
	
}
